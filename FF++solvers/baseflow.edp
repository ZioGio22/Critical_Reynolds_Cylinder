//////////////////////////////////////////////////////////////////////////////////
//primary stability of a circular cylinder
//verbosity = 0;
include "getARGV.idp"
real Re = getARGV("-Re",10.0);
verbosity = 0;
real ni=1/Re;

//reading mesh
mesh Th = readmesh("Flows/mesh.msh");
//////////////////////////////////////////////////////////////////////////////////
real eps=1.e-7;

//finite element spaces
fespace Vh(Th,P2); //
fespace Ph(Th,P1); //
fespace VPh(Th,[P2,P2,P1]);
//u1 u2 p actual flow
//du1,du2, dp Newtons's flow
// v1,v2, q Test function
VPh [u1,u2,p];
VPh [v1,v2,q];
VPh [du1,du2,dp];
//reading the baseflow of the precedent Reynolds
ifstream file ("Flows/Stokes_flow.txt");
file>> u1[];
//macros

macro div(u1,u2) (dx(u1)+dy(u2)) //
macro grad(u1,u2) [dx(u1),dy(u2)] //
macro ugrad(u1,u2,v) (u1*dx(v) + u2*dy(v)) //
macro Ugrad(u1,u2,v1,v2) [ugrad(u1,u2,v1),ugrad(u1,u2,v2)] //


//Newton's Navier Stokes solvers

//Navier Stokes
varf NS ([du1,du2,dp],[v1,v2,q])=

int2d(Th)(
  Ugrad(u1,u2,u1,u2)'*[v1,v2]
  +ni*(dx(u1)*dx(v1)+dx(u2)*dx(v2)+dy(u1)*dy(v1)+dy(u2)*dy(v2))
  -p*div(v1,v2)
  +q*div(u1,u2)+p*q*eps
);

//Navier Stokes perturbation

varf dNS([du1,du2,dp],[v1,v2,q])=

int2d(Th)(
  +ni*(dx(du1)*dx(v1)+dx(du2)*dx(v2)+dy(du1)*dy(v1)+dy(du2)*dy(v2))
  -dp*div(v1,v2)
  +q*div(du1,du2)+dp*q*eps
  +Ugrad(du1,du2,u1,u2)'*[v1,v2]
  +Ugrad(u1,u2,du1,du2)'*[v1,v2]
  )
  +on(1,4, du1=1,du2=0)
  +on(2, du1=0,du2=0);


  int i=0;
  for (i=0;i<=20; i++){

    real[int] b=NS(0, VPh); // assemblo il vettore F(u_0)
    matrix SM=dNS(VPh,VPh); // assemblo la matrice dF(u_0)
    set(SM, solver=sparsesolver); //opzioni per la soluzione
    real[int] w = SM^-1*b; //risolve  dF(u_0)*w=F(u_0) ==> w=-du

    u1[] -= w; // un+1=un+du

    if(w.l2<5e-8) break; //controllo sul residuo
    cout << " iter = "<< i << "  " << w.l2 <<endl;

  }
ofstream file2("Flows/Stokes_flow.txt");
file2 << u1[];
